Heuristieken hoorcollege 05-11-2019

College 2
Hoeveel mogelijkheden?
- Upperbound = maximaal zoveel mogelijkheden, dus langste pad die je nodig hebt om
  het probleem op te lossen.
- Lowerbound = snelst mogelijke manier om het probleem op te lossen
- Concept van het maken van een ruimte met al je mogelijkheden is het begin van je
  probleem eigenlijk in de heuristieken.
- Complexiteitsfunctie van de toestandsruimte (2^n-1)
- (n boven k) = N!/ k!(n-k)!
- Moeilijkheid instantie: toestandsruimtegrootte
- Moeiljkheid probleem: toename t'grootte
- Moeilijkheid van een pronleem (instantie)
  - Klassiek antwoord: "Probleem si moeilijk als het efficientste algoritme voor
    moeilijkste instantie niet in polynomiale tijd een oplossing vindt"
  - We kennen dat algoritme niet (en kunnen dat niet kennen)
  - Verschillen per instantie zijn groot
- Constraints satisfaction problem (CSP)
  - Oplossing moet voldoen aan constraints
  - Alle oplossingen even goed
- Constrained optimization problem (COP)
  - Oplossing: zo goed mogelijk
  - Objective function (scorefunctie, fitnessfunctie)
  - OOK constraints aan variabelen
- Free optimization problem (FOP)
  - Oplossing: zo goed mogelijke
  - Objective function (scorefunctie, fitnessfunctie)
  - Geen constraints aan variabelen
GEMIST STUKJE
- Een instantie is makkelijk als:
  - De toestandsruimte klein is
  - De oplossingsdichtheid hoog is
  - Er goed bruikbare leuds zijn
  - De oplossingen patronen vertonen
  - De objective function is convex

College 3
  Probleemtypes
    - constraint satisfaction (CSP)
    - constrained optimization (COP)
    - Free optimization (FOP)

  De basics
    - Iteratief algoritme
    - Sterk voor een algoritme dat je sowieso een oplossing vindt.
    - Back tracking: 1-->1-->1-->1 en dan checken of het een geldige oplossing
      is (nee?)--> dan ga je dus het eerste vakje terug vervangen met alle
      mogelijkheden en dan checken voor elke verandering of die klopt (Nee?)-->
      dan check je de voorlaatste mogelijkheid om mogelijkheden enz. dus je
      je maakt laatste vakje elke mogelijkheid, nee geen oplossing, dan ga je
      dus terug naar een mogelijkheid met leeg vakje, vult in het voorlaatste
      vakje een 2 in en vult dan weer 1-9 in, in het lege vakje, etc. Depth
      first
    - Depth- first checklist: stack, recursie, archief, back tracking, pruning,
      exhaustive, brute force, compleet

  Depth- first: open issues
    - Depth-limited search, iterative deepening search
    - Alleen mutaties op de stack?
    - Efficientie van het archief
    - (On)eindigheid ...
    - Breadth-first checklist: queue, geen recursie, archief, geen back
      tracking, pruning (ja, door archief), exhaustive, brute force ja,
      compleet ja maar ook optimaal
    - Alleen maar nadelen bij een kakuru
    - Als je niet helemaal naar beneden hoeft in je boom, is breadth firt heel
      handig. Dus met de schuifjes (of zoals met rushhour). Maar het nadeel is,
      is dat de queue dus heel groot kan worden. Bij de schuifjes is dit dus
      een probleem (lowerbound = 2; upperbound = 4) stijgt dus met elke child
      2/4 keer, dus exponentieel en dit kan een heel groot probleem zijn voor je
      geheugen. Archief moet dan net zo groot zijn als de statespace (9!).

Branch-and-Bound
  - Depth-first voor Constrained Optimization problems, archief, Backtracking?,
    recursie, pruning (yes, in a way), Exhaustive, Brute force, optimaal
  - Breadth firt waarbij je de mogelijkheden die het maximum overschrijden
    gelijk weg doet.
